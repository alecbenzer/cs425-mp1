# Validates the correctness of the logs generated by bin/main
import os
import re
import numpy as np
from collections import namedtuple
from itertools import product

Message = namedtuple('Message', ['from_id', 'to_id', 'lamport', 'vector', 'real'])

class VectorTimestamp(list):
    def __eq__(a, b):
        return all(x == y for x, y in zip(a, b))

    def __ne__(a, b):
        return not (a == b)

    def __le__(a, b):
        return all(x <= y for x, y in zip(a, b))

    def __lt__(a, b):
        return a <= b and any(x < y for x, y in zip(a, b))

    def __ge__(a, b):
        return b <= a

    def __gt__(a, b):
        return b < a


p = re.compile("^log.(\\d)+$")
filenames = [fn for fn in os.listdir('.') if p.match(fn)]

messages = []
messages_by_process = {}

for fn in filenames:
    to_id = int(p.match(fn).group(1))
    messages_by_process[to_id] = []
    with open(fn, 'r') as f:
        for line in f:
            if line[0] == '#':
                continue

            from_id, lamport, vector, real = line.split(' ')

            from_id = int(from_id)
            lamport = int(lamport)
            vector = VectorTimestamp([int(t) for t in vector.strip('[]').split(',')])
            real = np.datetime64(int(float(real) * 1e9), 'ns')

            m = Message(from_id, to_id, lamport, vector, real)
            messages.append(m)
            messages_by_process[to_id].append(m)

# Check that each process's timestamps are monotonic
for msgs in messages_by_process.values():
    for i in range(len(msgs) - 1):
        if msgs[i].real > msgs[i+1].real:
            print "ERROR"
        if msgs[i].lamport > msgs[i+1].lamport:
            print "ERROR"
        if not (msgs[i].vector <= msgs[i+1].vector):
            print "%r should be <= %r" % (msgs[i].vector, msgs[i+1].vector)

for i, j in product(range(len(messages)), repeat=2):
    if i == j:
        continue
    if messages[i].vector <= messages[j].vector:
        if not (messages[i].real <= messages[j].real):
            print "%r <= %r but not (%r <= %r)" % (messages[i].vector, messages[j].vector, messages[i].real, messages[j].real)
    if messages[i].vector < messages[j].vector:
        if not (messages[i].real < messages[j].real):
            print "%r < %r but not (%r < %r)" % (messages[i].vector, messages[j].vector, messages[i].real, messages[j].real)
        if not (messages[i].lamport < messages[j].lamport):
            print "%r < %r but not (%r < %r)" % (messages[i].vector, messages[j].vector, messages[i].lamport, messages[j].lamport)

